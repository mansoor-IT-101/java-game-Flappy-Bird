// Pipe dimensions and position
int pipeX = boardWidth;
int pipeY = 0;
int pipeWidth = 64;
int pipeHeight = 512;

// Pipe class
class Pipe {
    int x = pipeX;
    int y = pipeY;
    int width = pipeWidth;
    int height = pipeHeight;
    Image img;
    boolean passed = false;

    Pipe(Image img) {
        this.img = img;
    }
}

// Pipes list and pipe image variables
Image topPipeImg;
Image bottomPipeImg;
ArrayList<Pipe> pipes = new ArrayList<>();
Random random = new Random();
int velocityX = -4;

// Pipe placement method
void placePipes() {
    int randomPipeY = pipeY - pipeHeight / 4 - random.nextInt(pipeHeight / 2);
    int openingSpace = boardHeight / 4;

    Pipe topPipe = new Pipe(topPipeImg);
    topPipe.y = randomPipeY;
    pipes.add(topPipe);

    Pipe bottomPipe = new Pipe(bottomPipeImg);
    bottomPipe.y = topPipe.y + pipeHeight + openingSpace;
    pipes.add(bottomPipe);
}

// In the move() method (relevant part for pipes)
for (Pipe pipe : pipes) {
    pipe.x += velocityX;

    if (!pipe.passed && bird.x > pipe.x + pipe.width) {
        score += 0.5;
        pipe.passed = true;
        Sound.playSound("point.wav");
    }

    if (collision(bird, pipe)) {
        Sound.playSound("hit.wav");
        gameOver = true;
        placePipeTimer.stop();
        gameLoop.stop();
        String name = JOptionPane.showInputDialog(null, "Enter your name:");
        DatabaseManager.saveScore(name, (int) score);
    }
}
